# Title: Dockerfile for building the EVE kernel
VERSION=$(shell git rev-parse --short=12 HEAD)
DIRTY=$(shell git diff --quiet || echo '-dirty')
EVE_FLAVOR=generic
ARCHITECTURE=amd64
KERNEL_TAG=v6.1.38
PLATFORM=linux/$(ARCHITECTURE)
BUILD_USER:=$(shell id -un)

SOURCE_DATE_EPOCH=$(shell git log -1 --format=%ct)
BRANCH=eve-kernel-$(ARCHITECTURE)-$(KERNEL_TAG)-$(EVE_FLAVOR)
# make sure we get a date in correct format, otherwise initramfs cpio mtime will be variable
KBUILD_BUILD_TIMESTAMP=$(shell git log -1 --format=%cd | cut -f1 -d"+")

ifeq ($(BUILDKIT_PROGRESS),)
    export BUILDKIT_PROGRESS := plain
endif

# if BRANCH is defined on a command line we are running under CI
# we add user name to DIRTY to avoid docker tag conflicts
# when building on a shared machine with shared docker cache
ifeq ($(origin BRANCH), file)
	DIRTY:=-$(BUILD_USER)$(DIRTY)
endif

.PHONY: all help

all: kernel-gcc

help: Makefile
	@echo
	@echo "Makefile to build EVE kernel"
	@echo "Usage: make [target]"
	@echo "Targets:"
	@echo "  kernel-gcc: build kernel with gcc"
	@echo "  kernel-clang: build kernel with clang"
	@echo "  docker-tag-gcc: print docker tag for gcc kernel"
	@echo "  docker-tag-clang: print docker tag for clang kernel"
	@echo "  push-gcc: push gcc kernel to docker.io"
	@echo "  push-clang: push clang kernel to docker.io"
	@echo "  clean: remove generated files"
	@echo

pull-eve-build-tools:
	docker pull lfedge/eve-build-tools:main
.PHONY: pull-eve-build-tools

# do not build sbom target directly, it depends on DOCKERFILE variable set by kernel-gcc or kernel-clang
SBOM_TARGETS=kernel-sbom-gh.spdx.json kernel-sbom-docker.spdx.json
sbom: $(SBOM_TARGETS)

kernel-sbom-gh.spdx.json: pull-eve-build-tools
	docker run  -v $(PWD):/in lfedge/eve-build-tools:main github-sbom-generator \
			generate --format spdx-json /in/ | jq . > ./kernel-sbom-gh.spdx.json

#if DOCKERFILE is not set, this target will fail
kernel-sbom-docker.spdx.json: pull-eve-build-tools $(DOCKERFILE)
	@if [ -z "$(DOCKERFILE)" ]; then \
		echo "DOCKERFILE not set. Do not build 'sbom' target directly"; \
		exit 1; \
	fi
	@echo "Generating SBOM for $(DOCKERFILE)"
	docker run -v $(PWD):/in lfedge/eve-build-tools:main dockerfile-add-scanner scan /in/$(DOCKERFILE) \
		--format spdx-json | jq . > ./kernel-sbom-docker.spdx.json

kernel-gcc: DOCKERFILE:=Dockerfile.gcc
kernel-clang: DOCKERFILE:=Dockerfile.clang

kernel-build-%: sbom Makefile.eve
	@echo "Building kernel version $(BRANCH):$(VERSION)-$* with compiler $*"
	docker buildx build \
	--build-arg="SOURCE_DATE_EPOCH=$(SOURCE_DATE_EPOCH)" \
	--build-arg="KBUILD_BUILD_TIMESTAMP=$(KBUILD_BUILD_TIMESTAMP)" \
	--build-arg="LOCALVERSION=$(VERSION)$(DIRTY)" \
	--platform $(PLATFORM) -t lfedge/eve-kernel:$(BRANCH)-$(VERSION)$(DIRTY)-$* --load -f Dockerfile.$* .

# we need these intermediate targets to make .PHONY work for pattern rules
kernel-gcc: kernel-build-gcc
kernel-clang: kernel-build-clang
docker-tag-gcc: docker-tag-generate-gcc
docker-tag-clang: docker-tag-generate-clang
push-gcc: push-image-gcc
push-clang: push-image-clang

.PHONY: kernel-gcc kernel-clang docker-tag-gcc docker-tag-clang push-gcc push-clang

docker-tag-generate-%:
	@echo "docker.io/lfedge/eve-kernel:$(BRANCH)-$(VERSION)$(DIRTY)-$*"

push-image-%:
	$(if $(DIRTY), $(error "Not pushing since the repo is dirty"))
	docker push lfedge/eve-kernel:$(BRANCH)-$(VERSION)-$*

.PHONY: clean
clean:
	rm -f $(SBOM_TARGETS)
